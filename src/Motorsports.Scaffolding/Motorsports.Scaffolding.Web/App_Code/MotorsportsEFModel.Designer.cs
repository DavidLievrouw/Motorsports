//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Motorsports.Scaffolding.Web;

[assembly: EdmSchema()]
#region EDM Relationship Metadata

[assembly: EdmRelationship("MotorsportsEFModel", "FK_Country_Participant", "Country", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Country), "Participant", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Participant), true)]
[assembly: EdmRelationship("MotorsportsEFModel", "FK_Country_Team", "Country", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Country), "Team", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Team), true)]
[assembly: EdmRelationship("MotorsportsEFModel", "FK_Country_Venue", "Country", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Country), "Venue", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Venue), true)]
[assembly: EdmRelationship("MotorsportsEFModel", "FK_Participant_RoundWinner", "Participant", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Participant), "RoundWinner", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RoundWinner), true)]
[assembly: EdmRelationship("MotorsportsEFModel", "FK_Participant_SeasonWinner", "Participant", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Participant), "SeasonWinner", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SeasonWinner), true)]
[assembly: EdmRelationship("MotorsportsEFModel", "FK_Round_RoundResult", "Round", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Round), "RoundResult", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(RoundResult), true)]
[assembly: EdmRelationship("MotorsportsEFModel", "FK_Round_RoundWinner", "Round", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Round), "RoundWinner", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RoundWinner), true)]
[assembly: EdmRelationship("MotorsportsEFModel", "FK_Season_Round", "Season", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Season), "Round", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Round), true)]
[assembly: EdmRelationship("MotorsportsEFModel", "FK_Venue_Round", "Venue", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Venue), "Round", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Round), true)]
[assembly: EdmRelationship("MotorsportsEFModel", "FK_Status_RoundResult", "Status", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Status), "RoundResult", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RoundResult), true)]
[assembly: EdmRelationship("MotorsportsEFModel", "FK_Team_RoundResult", "Team", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Team), "RoundResult", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RoundResult), true)]
[assembly: EdmRelationship("MotorsportsEFModel", "FK_Season_SeasonWinner", "Season", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Season), "SeasonWinner", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SeasonWinner), true)]
[assembly: EdmRelationship("MotorsportsEFModel", "FK_Sport_Season", "Sport", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sport), "Season", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Season), true)]
[assembly: EdmRelationship("MotorsportsEFModel", "FK_Sport_Team", "Sport", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Sport), "Team", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Team), true)]
[assembly: EdmRelationship("MotorsportsEFModel", "SeasonResult", "Season", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Season), "Team", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Team))]

#endregion

namespace Motorsports.Scaffolding.Web
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class Entities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new Entities object using the connection string found in the 'Entities' section of the application configuration file.
        /// </summary>
        public Entities() : base("name=Entities", "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Entities object.
        /// </summary>
        public Entities(string connectionString) : base(connectionString, "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Entities object.
        /// </summary>
        public Entities(EntityConnection connection) : base(connection, "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Country> Countries
        {
            get
            {
                if ((_Countries == null))
                {
                    _Countries = base.CreateObjectSet<Country>("Countries");
                }
                return _Countries;
            }
        }
        private ObjectSet<Country> _Countries;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Participant> Participants
        {
            get
            {
                if ((_Participants == null))
                {
                    _Participants = base.CreateObjectSet<Participant>("Participants");
                }
                return _Participants;
            }
        }
        private ObjectSet<Participant> _Participants;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Round> Rounds
        {
            get
            {
                if ((_Rounds == null))
                {
                    _Rounds = base.CreateObjectSet<Round>("Rounds");
                }
                return _Rounds;
            }
        }
        private ObjectSet<Round> _Rounds;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RoundResult> RoundResults
        {
            get
            {
                if ((_RoundResults == null))
                {
                    _RoundResults = base.CreateObjectSet<RoundResult>("RoundResults");
                }
                return _RoundResults;
            }
        }
        private ObjectSet<RoundResult> _RoundResults;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RoundWinner> RoundWinners
        {
            get
            {
                if ((_RoundWinners == null))
                {
                    _RoundWinners = base.CreateObjectSet<RoundWinner>("RoundWinners");
                }
                return _RoundWinners;
            }
        }
        private ObjectSet<RoundWinner> _RoundWinners;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Season> Seasons
        {
            get
            {
                if ((_Seasons == null))
                {
                    _Seasons = base.CreateObjectSet<Season>("Seasons");
                }
                return _Seasons;
            }
        }
        private ObjectSet<Season> _Seasons;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SeasonWinner> SeasonWinners
        {
            get
            {
                if ((_SeasonWinners == null))
                {
                    _SeasonWinners = base.CreateObjectSet<SeasonWinner>("SeasonWinners");
                }
                return _SeasonWinners;
            }
        }
        private ObjectSet<SeasonWinner> _SeasonWinners;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Sport> Sports
        {
            get
            {
                if ((_Sports == null))
                {
                    _Sports = base.CreateObjectSet<Sport>("Sports");
                }
                return _Sports;
            }
        }
        private ObjectSet<Sport> _Sports;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Status> Status
        {
            get
            {
                if ((_Status == null))
                {
                    _Status = base.CreateObjectSet<Status>("Status");
                }
                return _Status;
            }
        }
        private ObjectSet<Status> _Status;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Team> Teams
        {
            get
            {
                if ((_Teams == null))
                {
                    _Teams = base.CreateObjectSet<Team>("Teams");
                }
                return _Teams;
            }
        }
        private ObjectSet<Team> _Teams;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Venue> Venues
        {
            get
            {
                if ((_Venues == null))
                {
                    _Venues = base.CreateObjectSet<Venue>("Venues");
                }
                return _Venues;
            }
        }
        private ObjectSet<Venue> _Venues;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Countries EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCountries(Country country)
        {
            base.AddObject("Countries", country);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Participants EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToParticipants(Participant participant)
        {
            base.AddObject("Participants", participant);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Rounds EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRounds(Round round)
        {
            base.AddObject("Rounds", round);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RoundResults EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRoundResults(RoundResult roundResult)
        {
            base.AddObject("RoundResults", roundResult);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RoundWinners EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRoundWinners(RoundWinner roundWinner)
        {
            base.AddObject("RoundWinners", roundWinner);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Seasons EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSeasons(Season season)
        {
            base.AddObject("Seasons", season);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SeasonWinners EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSeasonWinners(SeasonWinner seasonWinner)
        {
            base.AddObject("SeasonWinners", seasonWinner);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Sports EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSports(Sport sport)
        {
            base.AddObject("Sports", sport);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Status EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStatus(Status status)
        {
            base.AddObject("Status", status);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Teams EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTeams(Team team)
        {
            base.AddObject("Teams", team);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Venues EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToVenues(Venue venue)
        {
            base.AddObject("Venues", venue);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityType(NamespaceName="MotorsportsEFModel", Name="Country")]
    [Serializable()]
    [DataContract(IsReference=true)]
    public partial class Country : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Country object.
        /// </summary>
        /// <param name="iSO">Initial value of the ISO property.</param>
        public static Country CreateCountry(global::System.String iSO)
        {
            Country country = new Country();
            country.ISO = iSO;
            return country;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        [DataMember()]
        public global::System.String ISO
        {
            get
            {
                return _ISO;
            }
            set
            {
                if (_ISO != value)
                {
                    OnISOChanging(value);
                    ReportPropertyChanging("ISO");
                    _ISO = StructuralObject.SetValidValue(value, false, "ISO");
                    ReportPropertyChanged("ISO");
                    OnISOChanged();
                }
            }
        }
        private global::System.String _ISO;
        partial void OnISOChanging(global::System.String value);
        partial void OnISOChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=true)]
        [DataMember()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=true)]
        [DataMember()]
        public global::System.String NiceName
        {
            get
            {
                return _NiceName;
            }
            set
            {
                OnNiceNameChanging(value);
                ReportPropertyChanging("NiceName");
                _NiceName = StructuralObject.SetValidValue(value, true, "NiceName");
                ReportPropertyChanged("NiceName");
                OnNiceNameChanged();
            }
        }
        private global::System.String _NiceName;
        partial void OnNiceNameChanging(global::System.String value);
        partial void OnNiceNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=true)]
        [DataMember()]
        public global::System.String ISO3
        {
            get
            {
                return _ISO3;
            }
            set
            {
                OnISO3Changing(value);
                ReportPropertyChanging("ISO3");
                _ISO3 = StructuralObject.SetValidValue(value, true, "ISO3");
                ReportPropertyChanged("ISO3");
                OnISO3Changed();
            }
        }
        private global::System.String _ISO3;
        partial void OnISO3Changing(global::System.String value);
        partial void OnISO3Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=true)]
        [DataMember()]
        public Nullable<global::System.Int16> NumCode
        {
            get
            {
                return _NumCode;
            }
            set
            {
                OnNumCodeChanging(value);
                ReportPropertyChanging("NumCode");
                _NumCode = StructuralObject.SetValidValue(value, "NumCode");
                ReportPropertyChanged("NumCode");
                OnNumCodeChanged();
            }
        }
        private Nullable<global::System.Int16> _NumCode;
        partial void OnNumCodeChanging(Nullable<global::System.Int16> value);
        partial void OnNumCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=true)]
        [DataMember()]
        public Nullable<global::System.Int16> PhoneCode
        {
            get
            {
                return _PhoneCode;
            }
            set
            {
                OnPhoneCodeChanging(value);
                ReportPropertyChanging("PhoneCode");
                _PhoneCode = StructuralObject.SetValidValue(value, "PhoneCode");
                ReportPropertyChanged("PhoneCode");
                OnPhoneCodeChanged();
            }
        }
        private Nullable<global::System.Int16> _PhoneCode;
        partial void OnPhoneCodeChanging(Nullable<global::System.Int16> value);
        partial void OnPhoneCodeChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Country_Participant", "Participant")]
        public EntityCollection<Participant> Participants
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Participant>("MotorsportsEFModel.FK_Country_Participant", "Participant");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Participant>("MotorsportsEFModel.FK_Country_Participant", "Participant", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Country_Team", "Team")]
        public EntityCollection<Team> Teams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Team>("MotorsportsEFModel.FK_Country_Team", "Team");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Team>("MotorsportsEFModel.FK_Country_Team", "Team", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Country_Venue", "Venue")]
        public EntityCollection<Venue> Venues
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Venue>("MotorsportsEFModel.FK_Country_Venue", "Venue");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Venue>("MotorsportsEFModel.FK_Country_Venue", "Venue", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityType(NamespaceName="MotorsportsEFModel", Name="Participant")]
    [Serializable()]
    [DataContract(IsReference=true)]
    public partial class Participant : EntityObject
    {

      public override string ToString()
      {
        return string.Format("{0} {1} ",
                             LastName ?? string.Empty,
                             FirstName ?? string.Empty).Trim();
      }
        #region Factory Method
    
        /// <summary>
        /// Create a new Participant object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="title">Initial value of the Title property.</param>
        /// <param name="firstName">Initial value of the FirstName property.</param>
        /// <param name="lastName">Initial value of the LastName property.</param>
        /// <param name="country">Initial value of the Country property.</param>
        public static Participant CreateParticipant(global::System.Int32 id, global::System.String title, global::System.String firstName, global::System.String lastName, global::System.String country)
        {
            Participant participant = new Participant();
            participant.Id = id;
            participant.Title = title;
            participant.FirstName = firstName;
            participant.LastName = lastName;
            participant.Country = country;
            return participant;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        [DataMember()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false, "Title");
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false, "FirstName");
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false, "LastName");
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.String Country
        {
            get
            {
                return _Country;
            }
            set
            {
                OnCountryChanging(value);
                ReportPropertyChanging("Country");
                _Country = StructuralObject.SetValidValue(value, false, "Country");
                ReportPropertyChanged("Country");
                OnCountryChanged();
            }
        }
        private global::System.String _Country;
        partial void OnCountryChanging(global::System.String value);
        partial void OnCountryChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Country_Participant", "Country")]
        public Country Country1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("MotorsportsEFModel.FK_Country_Participant", "Country").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("MotorsportsEFModel.FK_Country_Participant", "Country").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<Country> Country1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("MotorsportsEFModel.FK_Country_Participant", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("MotorsportsEFModel.FK_Country_Participant", "Country", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Participant_RoundWinner", "RoundWinner")]
        public EntityCollection<RoundWinner> RoundWinners
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RoundWinner>("MotorsportsEFModel.FK_Participant_RoundWinner", "RoundWinner");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RoundWinner>("MotorsportsEFModel.FK_Participant_RoundWinner", "RoundWinner", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Participant_SeasonWinner", "SeasonWinner")]
        public EntityCollection<SeasonWinner> SeasonWinners
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SeasonWinner>("MotorsportsEFModel.FK_Participant_SeasonWinner", "SeasonWinner");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SeasonWinner>("MotorsportsEFModel.FK_Participant_SeasonWinner", "SeasonWinner", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityType(NamespaceName="MotorsportsEFModel", Name="Round")]
    [Serializable()]
    [DataContract(IsReference=true)]
    public partial class Round : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Round object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="date">Initial value of the Date property.</param>
        /// <param name="number">Initial value of the Number property.</param>
        /// <param name="season">Initial value of the Season property.</param>
        /// <param name="venue">Initial value of the Venue property.</param>
        public static Round CreateRound(global::System.Int32 id, global::System.DateTime date, global::System.Int16 number, global::System.Int32 season, global::System.String venue)
        {
            Round round = new Round();
            round.Id = id;
            round.Date = date;
            round.Number = number;
            round.Season = season;
            round.Venue = venue;
            return round;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        [DataMember()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value, "Date");
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private global::System.DateTime _Date;
        partial void OnDateChanging(global::System.DateTime value);
        partial void OnDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.Int16 Number
        {
            get
            {
                return _Number;
            }
            set
            {
                OnNumberChanging(value);
                ReportPropertyChanging("Number");
                _Number = StructuralObject.SetValidValue(value, "Number");
                ReportPropertyChanged("Number");
                OnNumberChanged();
            }
        }
        private global::System.Int16 _Number;
        partial void OnNumberChanging(global::System.Int16 value);
        partial void OnNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=true)]
        [DataMember()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.Int32 Season
        {
            get
            {
                return _Season;
            }
            set
            {
                OnSeasonChanging(value);
                ReportPropertyChanging("Season");
                _Season = StructuralObject.SetValidValue(value, "Season");
                ReportPropertyChanged("Season");
                OnSeasonChanged();
            }
        }
        private global::System.Int32 _Season;
        partial void OnSeasonChanging(global::System.Int32 value);
        partial void OnSeasonChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.String Venue
        {
            get
            {
                return _Venue;
            }
            set
            {
                OnVenueChanging(value);
                ReportPropertyChanging("Venue");
                _Venue = StructuralObject.SetValidValue(value, false, "Venue");
                ReportPropertyChanged("Venue");
                OnVenueChanged();
            }
        }
        private global::System.String _Venue;
        partial void OnVenueChanging(global::System.String value);
        partial void OnVenueChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Round_RoundResult", "RoundResult")]
        public RoundResult RoundResult
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RoundResult>("MotorsportsEFModel.FK_Round_RoundResult", "RoundResult").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RoundResult>("MotorsportsEFModel.FK_Round_RoundResult", "RoundResult").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<RoundResult> RoundResultReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RoundResult>("MotorsportsEFModel.FK_Round_RoundResult", "RoundResult");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RoundResult>("MotorsportsEFModel.FK_Round_RoundResult", "RoundResult", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Round_RoundWinner", "RoundWinner")]
        public EntityCollection<RoundWinner> RoundWinners
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RoundWinner>("MotorsportsEFModel.FK_Round_RoundWinner", "RoundWinner");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RoundWinner>("MotorsportsEFModel.FK_Round_RoundWinner", "RoundWinner", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Season_Round", "Season")]
        public Season Season1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Season>("MotorsportsEFModel.FK_Season_Round", "Season").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Season>("MotorsportsEFModel.FK_Season_Round", "Season").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<Season> Season1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Season>("MotorsportsEFModel.FK_Season_Round", "Season");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Season>("MotorsportsEFModel.FK_Season_Round", "Season", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Venue_Round", "Venue")]
        public Venue Venue1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Venue>("MotorsportsEFModel.FK_Venue_Round", "Venue").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Venue>("MotorsportsEFModel.FK_Venue_Round", "Venue").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<Venue> Venue1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Venue>("MotorsportsEFModel.FK_Venue_Round", "Venue");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Venue>("MotorsportsEFModel.FK_Venue_Round", "Venue", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityType(NamespaceName="MotorsportsEFModel", Name="RoundResult")]
    [Serializable()]
    [DataContract(IsReference=true)]
    public partial class RoundResult : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RoundResult object.
        /// </summary>
        /// <param name="round">Initial value of the Round property.</param>
        /// <param name="status">Initial value of the Status property.</param>
        public static RoundResult CreateRoundResult(global::System.Int32 round, global::System.String status)
        {
            RoundResult roundResult = new RoundResult();
            roundResult.Round = round;
            roundResult.Status = status;
            return roundResult;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        [DataMember()]
        public global::System.Int32 Round
        {
            get
            {
                return _Round;
            }
            set
            {
                if (_Round != value)
                {
                    OnRoundChanging(value);
                    ReportPropertyChanging("Round");
                    _Round = StructuralObject.SetValidValue(value, "Round");
                    ReportPropertyChanged("Round");
                    OnRoundChanged();
                }
            }
        }
        private global::System.Int32 _Round;
        partial void OnRoundChanging(global::System.Int32 value);
        partial void OnRoundChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.String Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value, false, "Status");
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.String _Status;
        partial void OnStatusChanging(global::System.String value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=true)]
        [DataMember()]
        public Nullable<global::System.Decimal> Rating
        {
            get
            {
                return _Rating;
            }
            set
            {
                OnRatingChanging(value);
                ReportPropertyChanging("Rating");
                _Rating = StructuralObject.SetValidValue(value, "Rating");
                ReportPropertyChanged("Rating");
                OnRatingChanged();
            }
        }
        private Nullable<global::System.Decimal> _Rating;
        partial void OnRatingChanging(Nullable<global::System.Decimal> value);
        partial void OnRatingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=true)]
        [DataMember()]
        public Nullable<global::System.Decimal> Rain
        {
            get
            {
                return _Rain;
            }
            set
            {
                OnRainChanging(value);
                ReportPropertyChanging("Rain");
                _Rain = StructuralObject.SetValidValue(value, "Rain");
                ReportPropertyChanged("Rain");
                OnRainChanged();
            }
        }
        private Nullable<global::System.Decimal> _Rain;
        partial void OnRainChanging(Nullable<global::System.Decimal> value);
        partial void OnRainChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=true)]
        [DataMember()]
        public Nullable<global::System.Int32> WinningTeam
        {
            get
            {
                return _WinningTeam;
            }
            set
            {
                OnWinningTeamChanging(value);
                ReportPropertyChanging("WinningTeam");
                _WinningTeam = StructuralObject.SetValidValue(value, "WinningTeam");
                ReportPropertyChanged("WinningTeam");
                OnWinningTeamChanged();
            }
        }
        private Nullable<global::System.Int32> _WinningTeam;
        partial void OnWinningTeamChanging(Nullable<global::System.Int32> value);
        partial void OnWinningTeamChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Round_RoundResult", "Round")]
        public Round Round1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Round>("MotorsportsEFModel.FK_Round_RoundResult", "Round").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Round>("MotorsportsEFModel.FK_Round_RoundResult", "Round").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<Round> Round1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Round>("MotorsportsEFModel.FK_Round_RoundResult", "Round");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Round>("MotorsportsEFModel.FK_Round_RoundResult", "Round", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Status_RoundResult", "Status")]
        public Status Status1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Status>("MotorsportsEFModel.FK_Status_RoundResult", "Status").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Status>("MotorsportsEFModel.FK_Status_RoundResult", "Status").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<Status> Status1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Status>("MotorsportsEFModel.FK_Status_RoundResult", "Status");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Status>("MotorsportsEFModel.FK_Status_RoundResult", "Status", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Team_RoundResult", "Team")]
        public Team Team
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("MotorsportsEFModel.FK_Team_RoundResult", "Team").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("MotorsportsEFModel.FK_Team_RoundResult", "Team").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<Team> TeamReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("MotorsportsEFModel.FK_Team_RoundResult", "Team");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Team>("MotorsportsEFModel.FK_Team_RoundResult", "Team", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityType(NamespaceName="MotorsportsEFModel", Name="RoundWinner")]
    [Serializable()]
    [DataContract(IsReference=true)]
    public partial class RoundWinner : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RoundWinner object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="round">Initial value of the Round property.</param>
        /// <param name="participant">Initial value of the Participant property.</param>
        public static RoundWinner CreateRoundWinner(global::System.Int32 id, global::System.Int32 round, global::System.Int32 participant)
        {
            RoundWinner roundWinner = new RoundWinner();
            roundWinner.Id = id;
            roundWinner.Round = round;
            roundWinner.Participant = participant;
            return roundWinner;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        [DataMember()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.Int32 Round
        {
            get
            {
                return _Round;
            }
            set
            {
                OnRoundChanging(value);
                ReportPropertyChanging("Round");
                _Round = StructuralObject.SetValidValue(value, "Round");
                ReportPropertyChanged("Round");
                OnRoundChanged();
            }
        }
        private global::System.Int32 _Round;
        partial void OnRoundChanging(global::System.Int32 value);
        partial void OnRoundChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.Int32 Participant
        {
            get
            {
                return _Participant;
            }
            set
            {
                OnParticipantChanging(value);
                ReportPropertyChanging("Participant");
                _Participant = StructuralObject.SetValidValue(value, "Participant");
                ReportPropertyChanged("Participant");
                OnParticipantChanged();
            }
        }
        private global::System.Int32 _Participant;
        partial void OnParticipantChanging(global::System.Int32 value);
        partial void OnParticipantChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Participant_RoundWinner", "Participant")]
        public Participant Participant1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Participant>("MotorsportsEFModel.FK_Participant_RoundWinner", "Participant").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Participant>("MotorsportsEFModel.FK_Participant_RoundWinner", "Participant").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<Participant> Participant1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Participant>("MotorsportsEFModel.FK_Participant_RoundWinner", "Participant");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Participant>("MotorsportsEFModel.FK_Participant_RoundWinner", "Participant", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Round_RoundWinner", "Round")]
        public Round Round1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Round>("MotorsportsEFModel.FK_Round_RoundWinner", "Round").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Round>("MotorsportsEFModel.FK_Round_RoundWinner", "Round").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<Round> Round1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Round>("MotorsportsEFModel.FK_Round_RoundWinner", "Round");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Round>("MotorsportsEFModel.FK_Round_RoundWinner", "Round", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityType(NamespaceName="MotorsportsEFModel", Name="Season")]
    [Serializable()]
    [DataContract(IsReference=true)]
    public partial class Season : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Season object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="sport">Initial value of the Sport property.</param>
        public static Season CreateSeason(global::System.Int32 id, global::System.String sport)
        {
            Season season = new Season();
            season.Id = id;
            season.Sport = sport;
            return season;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        [DataMember()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.String Sport
        {
            get
            {
                return _Sport;
            }
            set
            {
                OnSportChanging(value);
                ReportPropertyChanging("Sport");
                _Sport = StructuralObject.SetValidValue(value, false, "Sport");
                ReportPropertyChanged("Sport");
                OnSportChanged();
            }
        }
        private global::System.String _Sport;
        partial void OnSportChanging(global::System.String value);
        partial void OnSportChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=true)]
        [DataMember()]
        public global::System.String Label
        {
            get
            {
                return _Label;
            }
            set
            {
                OnLabelChanging(value);
                ReportPropertyChanging("Label");
                _Label = StructuralObject.SetValidValue(value, true, "Label");
                ReportPropertyChanged("Label");
                OnLabelChanged();
            }
        }
        private global::System.String _Label;
        partial void OnLabelChanging(global::System.String value);
        partial void OnLabelChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Season_Round", "Round")]
        public EntityCollection<Round> Rounds
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Round>("MotorsportsEFModel.FK_Season_Round", "Round");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Round>("MotorsportsEFModel.FK_Season_Round", "Round", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Season_SeasonWinner", "SeasonWinner")]
        public EntityCollection<SeasonWinner> SeasonWinners
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SeasonWinner>("MotorsportsEFModel.FK_Season_SeasonWinner", "SeasonWinner");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SeasonWinner>("MotorsportsEFModel.FK_Season_SeasonWinner", "SeasonWinner", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Sport_Season", "Sport")]
        public Sport Sport1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sport>("MotorsportsEFModel.FK_Sport_Season", "Sport").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sport>("MotorsportsEFModel.FK_Sport_Season", "Sport").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<Sport> Sport1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sport>("MotorsportsEFModel.FK_Sport_Season", "Sport");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Sport>("MotorsportsEFModel.FK_Sport_Season", "Sport", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "SeasonResult", "Team")]
        public Team Team
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("MotorsportsEFModel.SeasonResult", "Team").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("MotorsportsEFModel.SeasonResult", "Team").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<Team> TeamReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("MotorsportsEFModel.SeasonResult", "Team");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Team>("MotorsportsEFModel.SeasonResult", "Team", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityType(NamespaceName="MotorsportsEFModel", Name="SeasonWinner")]
    [Serializable()]
    [DataContract(IsReference=true)]
    public partial class SeasonWinner : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SeasonWinner object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="season">Initial value of the Season property.</param>
        /// <param name="participant">Initial value of the Participant property.</param>
        public static SeasonWinner CreateSeasonWinner(global::System.Int32 id, global::System.Int32 season, global::System.Int32 participant)
        {
            SeasonWinner seasonWinner = new SeasonWinner();
            seasonWinner.Id = id;
            seasonWinner.Season = season;
            seasonWinner.Participant = participant;
            return seasonWinner;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        [DataMember()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.Int32 Season
        {
            get
            {
                return _Season;
            }
            set
            {
                OnSeasonChanging(value);
                ReportPropertyChanging("Season");
                _Season = StructuralObject.SetValidValue(value, "Season");
                ReportPropertyChanged("Season");
                OnSeasonChanged();
            }
        }
        private global::System.Int32 _Season;
        partial void OnSeasonChanging(global::System.Int32 value);
        partial void OnSeasonChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.Int32 Participant
        {
            get
            {
                return _Participant;
            }
            set
            {
                OnParticipantChanging(value);
                ReportPropertyChanging("Participant");
                _Participant = StructuralObject.SetValidValue(value, "Participant");
                ReportPropertyChanged("Participant");
                OnParticipantChanged();
            }
        }
        private global::System.Int32 _Participant;
        partial void OnParticipantChanging(global::System.Int32 value);
        partial void OnParticipantChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Participant_SeasonWinner", "Participant")]
        public Participant Participant1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Participant>("MotorsportsEFModel.FK_Participant_SeasonWinner", "Participant").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Participant>("MotorsportsEFModel.FK_Participant_SeasonWinner", "Participant").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<Participant> Participant1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Participant>("MotorsportsEFModel.FK_Participant_SeasonWinner", "Participant");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Participant>("MotorsportsEFModel.FK_Participant_SeasonWinner", "Participant", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Season_SeasonWinner", "Season")]
        public Season Season1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Season>("MotorsportsEFModel.FK_Season_SeasonWinner", "Season").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Season>("MotorsportsEFModel.FK_Season_SeasonWinner", "Season").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<Season> Season1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Season>("MotorsportsEFModel.FK_Season_SeasonWinner", "Season");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Season>("MotorsportsEFModel.FK_Season_SeasonWinner", "Season", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityType(NamespaceName="MotorsportsEFModel", Name="Sport")]
    [Serializable()]
    [DataContract(IsReference=true)]
    public partial class Sport : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Sport object.
        /// </summary>
        /// <param name="name">Initial value of the Name property.</param>
        public static Sport CreateSport(global::System.String name)
        {
            Sport sport = new Sport();
            sport.Name = name;
            return sport;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        [DataMember()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false, "Name");
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=true)]
        [DataMember()]
        public global::System.String FullName
        {
            get
            {
                return _FullName;
            }
            set
            {
                OnFullNameChanging(value);
                ReportPropertyChanging("FullName");
                _FullName = StructuralObject.SetValidValue(value, true, "FullName");
                ReportPropertyChanged("FullName");
                OnFullNameChanged();
            }
        }
        private global::System.String _FullName;
        partial void OnFullNameChanging(global::System.String value);
        partial void OnFullNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Sport_Season", "Season")]
        public EntityCollection<Season> Seasons
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Season>("MotorsportsEFModel.FK_Sport_Season", "Season");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Season>("MotorsportsEFModel.FK_Sport_Season", "Season", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Sport_Team", "Team")]
        public EntityCollection<Team> Teams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Team>("MotorsportsEFModel.FK_Sport_Team", "Team");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Team>("MotorsportsEFModel.FK_Sport_Team", "Team", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityType(NamespaceName="MotorsportsEFModel", Name="Status")]
    [Serializable()]
    [DataContract(IsReference=true)]
    public partial class Status : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Status object.
        /// </summary>
        /// <param name="name">Initial value of the Name property.</param>
        public static Status CreateStatus(global::System.String name)
        {
            Status status = new Status();
            status.Name = name;
            return status;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        [DataMember()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false, "Name");
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Status_RoundResult", "RoundResult")]
        public EntityCollection<RoundResult> RoundResults
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RoundResult>("MotorsportsEFModel.FK_Status_RoundResult", "RoundResult");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RoundResult>("MotorsportsEFModel.FK_Status_RoundResult", "RoundResult", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityType(NamespaceName="MotorsportsEFModel", Name="Team")]
    [Serializable()]
    [DataContract(IsReference=true)]
    public partial class Team : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Team object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="sport">Initial value of the Sport property.</param>
        /// <param name="country">Initial value of the Country property.</param>
        public static Team CreateTeam(global::System.Int32 id, global::System.String name, global::System.String sport, global::System.String country)
        {
            Team team = new Team();
            team.Id = id;
            team.Name = name;
            team.Sport = sport;
            team.Country = country;
            return team;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        [DataMember()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.String Sport
        {
            get
            {
                return _Sport;
            }
            set
            {
                OnSportChanging(value);
                ReportPropertyChanging("Sport");
                _Sport = StructuralObject.SetValidValue(value, false, "Sport");
                ReportPropertyChanged("Sport");
                OnSportChanged();
            }
        }
        private global::System.String _Sport;
        partial void OnSportChanging(global::System.String value);
        partial void OnSportChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.String Country
        {
            get
            {
                return _Country;
            }
            set
            {
                OnCountryChanging(value);
                ReportPropertyChanging("Country");
                _Country = StructuralObject.SetValidValue(value, false, "Country");
                ReportPropertyChanged("Country");
                OnCountryChanged();
            }
        }
        private global::System.String _Country;
        partial void OnCountryChanging(global::System.String value);
        partial void OnCountryChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Country_Team", "Country")]
        public Country Country1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("MotorsportsEFModel.FK_Country_Team", "Country").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("MotorsportsEFModel.FK_Country_Team", "Country").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<Country> Country1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("MotorsportsEFModel.FK_Country_Team", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("MotorsportsEFModel.FK_Country_Team", "Country", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Team_RoundResult", "RoundResult")]
        public EntityCollection<RoundResult> RoundResults
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RoundResult>("MotorsportsEFModel.FK_Team_RoundResult", "RoundResult");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RoundResult>("MotorsportsEFModel.FK_Team_RoundResult", "RoundResult", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Sport_Team", "Sport")]
        public Sport Sport1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sport>("MotorsportsEFModel.FK_Sport_Team", "Sport").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sport>("MotorsportsEFModel.FK_Sport_Team", "Sport").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<Sport> Sport1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sport>("MotorsportsEFModel.FK_Sport_Team", "Sport");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Sport>("MotorsportsEFModel.FK_Sport_Team", "Sport", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "SeasonResult", "Season")]
        public EntityCollection<Season> Seasons
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Season>("MotorsportsEFModel.SeasonResult", "Season");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Season>("MotorsportsEFModel.SeasonResult", "Season", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityType(NamespaceName="MotorsportsEFModel", Name="Venue")]
    [Serializable()]
    [DataContract(IsReference=true)]
    public partial class Venue : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Venue object.
        /// </summary>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="country">Initial value of the Country property.</param>
        public static Venue CreateVenue(global::System.String name, global::System.String country)
        {
            Venue venue = new Venue();
            venue.Name = name;
            venue.Country = country;
            return venue;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=true, IsNullable=false)]
        [DataMember()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false, "Name");
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarProperty(EntityKeyProperty=false, IsNullable=false)]
        [DataMember()]
        public global::System.String Country
        {
            get
            {
                return _Country;
            }
            set
            {
                OnCountryChanging(value);
                ReportPropertyChanging("Country");
                _Country = StructuralObject.SetValidValue(value, false, "Country");
                ReportPropertyChanged("Country");
                OnCountryChanged();
            }
        }
        private global::System.String _Country;
        partial void OnCountryChanging(global::System.String value);
        partial void OnCountryChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Country_Venue", "Country")]
        public Country Country1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("MotorsportsEFModel.FK_Country_Venue", "Country").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("MotorsportsEFModel.FK_Country_Venue", "Country").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [Browsable(false)]
        [DataMember()]
        public EntityReference<Country> Country1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("MotorsportsEFModel.FK_Country_Venue", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("MotorsportsEFModel.FK_Country_Venue", "Country", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnore()]
        [SoapIgnore()]
        [DataMember()]
        [EdmRelationshipNavigationProperty("MotorsportsEFModel", "FK_Venue_Round", "Round")]
        public EntityCollection<Round> Rounds
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Round>("MotorsportsEFModel.FK_Venue_Round", "Round");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Round>("MotorsportsEFModel.FK_Venue_Round", "Round", value);
                }
            }
        }

        #endregion

    }

    #endregion

}
