@using System.Collections
@using Newtonsoft.Json

@model int?

@{
  var allSeasons = ((IEnumerable) ViewData["Seasons"]).OfType<Season>().ToList();
  var selectedSeason = (int?) ViewData["SelectedSeason"];
  var targetProperty = ViewData["TargetProperty"] ?? "Season";
  var autofocus = bool.Parse(ViewData["Autofocus"]?.ToString() ?? "false");

  var groupedSeasonsTasks = allSeasons
    .GroupBy(season => season.Sport)
    .OrderBy(_ => _.Key)
    .SelectAsync(async _ => new {
      id = 0,
      text = _.Key,
      children = await _
        .OrderBy(season => season.RelatedRounds.FirstOrDefault()?.Date ?? DateTime.MinValue)
        .SelectAsync(async season => new {
          id = season.Id,
          text = (await Html.PartialAsync("DisplayTemplates/" + nameof(Season), season)).ToHtmlString()
        })
    });

    var groupedSeasons = (await groupedSeasonsTasks).ToArray();
}

<select name="@targetProperty" id="slcSeasons" class="form-control" @(autofocus ? "autofocus=\"autofocus\"" : string.Empty)></select>

<script>
  $(document).ready(function() {
    var seasons = $("#slcSeasons");
    seasons.select2({
      placeholder: "Select a season",
      data: @Html.Raw(JsonConvert.SerializeObject(groupedSeasons)),
      escapeMarkup: function(markup) { return markup; }
    });
    seasons.val(@Html.Raw(selectedSeason.HasValue
                  ? "\"" + selectedSeason.Value + "\""
                  : "null"));
    seasons.trigger("change"); // Notify any JS components that the value changed
  });
</script>